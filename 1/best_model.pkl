ccopy_reg
_reconstructor
p1
(c__main__
LogisticRegression
p2
c__builtin__
object
p3
NtRp4
(dp5
S'b'
g1
(ctheano.tensor.sharedvar
TensorSharedVariable
p6
g3
NtRp7
(dp8
S'auto_name'
p9
S'auto_278'
p10
sS'index'
p11
NsS'tag'
p12
(itheano.gof.utils
scratchpad
p13
(dp14
S'trace'
p15
(lp16
(S'/usr/local/lib/python2.7/dist-packages/theano/compile/sharedvalue.py'
p17
I209
S'shared'
p18
S'utils.add_tag_trace(var)'
tp19
asbsS'container'
p20
g1
(ctheano.gof.link
Container
p21
g3
NtRp22
(dp23
S'name'
p24
S'b'
sS'storage'
p25
(lp26
cnumpy.core.multiarray
_reconstruct
p27
(cnumpy
ndarray
p28
(I0
tS'b'
tRp29
(I1
(I6
tcnumpy
dtype
p30
(S'f8'
I0
I1
tRp31
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S"\\\xe9e\xeex\xab\xe0?\xac\xa5\x1b\xed\xefG\xd1?\x9d\xec\xd4t\x19\x82\xe9\xbfO\xf5\xa6\xf0\x94\x8c\xd5\xbf'8\xfa5\xa1+\xe9?\xea\x14\x8b[\\e\xdc\xbf"
tbasS'strict'
p32
I00
sS'readonly'
p33
I00
sS'type'
p34
g1
(ctheano.tensor.type
TensorType
p35
g3
NtRp36
(dp37
S'broadcastable'
p38
(I00
tp39
sS'dtype'
p40
S'float64'
p41
sS'numpy_dtype'
p42
g31
sS'sparse_grad'
p43
I00
sg24
NsbsS'allow_downcast'
p44
Nsbsg24
S'b'
sS'owner'
p45
Nsg34
g36
sbsS'y_pred'
p46
g1
(ctheano.tensor.var
TensorVariable
p47
g3
NtRp48
(dp49
g9
S'auto_288'
p50
sg11
I1
sg12
(itheano.gof.utils
scratchpad
p51
(dp52
g15
(lp53
sbsg24
S'argmax'
p54
sg45
g1
(ctheano.gof.graph
Apply
p55
g3
NtRp56
(dp57
S'inputs'
p58
(lp59
g1
(g47
g3
NtRp60
(dp61
g9
S'auto_285'
p62
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p63
(dp64
g15
(lp65
(S'logistic_sgd.py'
p66
I105
S'__init__'
p67
S'self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)'
tp68
asbsg24
Nsg45
g1
(g55
g3
NtRp69
(dp70
g58
(lp71
g1
(g47
g3
NtRp72
(dp73
g9
S'auto_284'
p74
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p75
(dp76
g15
(lp77
(g66
I105
g67
S'self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)'
tp78
asbsg24
Nsg45
g1
(g55
g3
NtRp79
(dp80
g58
(lp81
g1
(g47
g3
NtRp82
(dp83
g9
S'auto_279'
p84
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p85
(dp86
g15
(lp87
(g66
I105
g67
S'self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)'
tp88
asbsg24
Nsg45
g1
(g55
g3
NtRp89
(dp90
g58
(lp91
g1
(g47
g3
NtRp92
(dp93
g9
S'auto_275'
p94
sg11
Nsg12
(itheano.gof.utils
scratchpad
p95
(dp96
g15
(lp97
(S'logistic_sgd.py'
p98
I322
S'sgd_optimization_mnist'
p99
S"x = T.matrix('x')  # data, presented as rasterized images"
tp100
asbsg24
S'x'
sg45
Nsg34
g1
(g35
g3
NtRp101
(dp102
g38
(I00
I00
tp103
sg40
S'float64'
p104
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g6
g3
NtRp105
(dp106
g9
S'auto_277'
p107
sg11
Nsg12
(itheano.gof.utils
scratchpad
p108
(dp109
g15
(lp110
(g17
I209
g18
S'utils.add_tag_trace(var)'
tp111
asbsg20
g1
(g21
g3
NtRp112
(dp113
g24
S'W'
sg25
(lp114
g27
(g28
(I0
tS'b'
tRp115
(I1
(I20
I6
tg31
I00
S'$M\x9f\xd0&\x17\xea\xbf\x11&\xc6*@"\x16\xc0\xab\r\xe5T\xd7\xf3\xdb?\x1a\xa3\xa6S\xe4\xb0\x01@\xa5\xf8\x1cC\xccN\n@\xc1\x1b\x9fB\xf4`\xda?\xcb\x1fS\x96vk\x05\xc0]\xaa\xbat\xe4n\xeb\xbf\xfa\x8fMtf\xd8\x1a@`\xda\xa6\x89\x1e\x8a\xe9\xbf\xd5W\x17\xa8\xf4\xf3\x12\xc0\xa1\x10\x7f\xbd\xd3\xe0\x02@\xe3%\xea\xdf.i\x1f\xc0:\xbb\xdc)EO\x02\xc0\x08\x84\x08\xa5\x18\xff\xb0?\x93B\xe1\x81\xfb\x90!@g\xcd\xc2\x04)\x14\x04\xc0\xa4\x83\xc6!\xe5i\x0e@%%e\xba\xc21%@(MV\xb9\x05\xda\x02@Mn3\xa3\xab\x84\xd2\xbf\x0f\xe6\x85\xfeyS!\xc0<\x8c\xbeCal\x10@]{\xfan\xd56 \xc0\x92\xb0\xfaC\xbdn\x01\xc0j)\xbc \x87<\xe6?\x0e\xf4\x8f\x8aU\xaa\xf5?\xdf\xe6J\x85a\x92\n@r\xa0\xb3\xce\x11\xad\x1b\xc0\xf7\x05\xa0\xce2\xd2\r@\x90\xbc\xc5\x11\xc81\x13\xc0>\xedo\x19v\x88\xf3\xbf\xd4\x8er\xe9h\x84&@x[\x19\x1cX\xa0\x06\xc0\xfd\x18\xf9\xb0\xf7J\x0c\xc0nU\x17\xaf\xee\x02\xf2?5\x18\xdbF\xa0\xb1\x0f@\xe5$\x82x/\xff\x06@1\xd0\x91\xcd\xc8.\x07@\n\xf2.\x16V\xb9\x05\xc0*/\xe0\xd0\xcc\xc9\xb6?\xac\x8f\xa3nHn\x1c\xc0j\xb2\xce_!="\xc0\xf5\xac\xa6\x17b\xbe\t\xc0\x0b\xac_Ur\x01\xc9\xbf\xb7\xeb\x17[*M\x11@\xe8\x05Z\xc4\xdfn\n@D\xc6\xd6 \xe5\x9c\x13@\x13\xb6u\x7f\x13G\x0c@\x94\xb2g)\t\xe5\x12\xc0LO\x8d\x87([\xea\xbf\xd8\xb1\x92|\x98\xb8\x07\xc0\xfc\xcdf\xa0\xabq\x1e@\x07\xe6\xfd\xce\xf5\x10\x05\xc0SK\xf7\xbe\xec-\xfa\xbf\x8d\x94\xe7\x92\x9c\xe1\x04@\x03kdn\x96\xe3\x11\xc0\\\xb9\xf8IG^\xea?\xf6LU\xae\x15\xf2\xe7\xbf\xf2\x0ctBza\x0b@\xd8\x1a\x05y\xc5\x87\xe5?\xcf\x08\xe0\xdb\xad}\xf1\xbf\xc8\x88\x97z\x80\x08\x11\xc0\xdc&9\xdc\xc8\xfe\xe3\xbf\xaaW\r\xe4[>\x04\xc0\x06\xb9\xfcO\xfaU\x1f@\xae\x05\x14\xb5\xcc\xdc\x04\xc0\xc8\xe8\x8e\x0c+\x13\x03\xc0D\x05E\x805C\x07@\xaf\x88\xaaY\xb0\x7f\x17@S\xc9q\xa0$\x1e\x01\xc0\xf4\xbe\n\xa3\xf3h\xfa\xbf\x94\x91\xa8I\x8bv\x16\xc0<\x1c\x91+\x96\xb2\xce\xbf(\xba\xf63\x1b\xd7\xf3\xbf\xd7:4\x8c\xaa\xfc\xc2?\'\x88c\xccU\x9d\xf5?\x83E\x88\x00\xacb\x16@\xd0\xbd@\xfa\x0b\xeb\xd1\xbf\xe8B\x03\x83\xf7\xfa\x0b@\xb4~\xda\x1f\xf3# \xc0\x18\x9f\xd5/H\x8b\x04@\\\x90\xcb\xe7\xf9\xb1\x06@\x0b\x88\xc9o.\xac\xe1\xbf\xbaZ+\xb8\\\xdd\x00@\x87\xb8\x16@\x10W\xec?\x00hx\xe5\xf4g\x1d@\x8d^;\x85j\xe9\xa1\xbf\xe6?\xb4\x7f&"\x07\xc0\xb3W\xac4\x9f\xac\x1d\xc0G\xaaz9@q\x08@0\x8c\xca\x87-\xed\xf5\xbf\xcfa\x9dJ\xd2\xb7\x14@vCf\xaf\x0b\xfc\xf7\xbf\xdf\xf4O@\xa6\xf1\x06\xc0~\x12\xcd\xf2\xa1\xfa\x03\xc0\xc0\xb0W\xa3>_\xf9?\xecB\x1f$\xf6\xae\x05@I\x13\xdf\xf0#\xbf\x01@\xc2\x1eH`tP"\xc0t\xaa\xf2Q\x86+\x0b\xc0-z46\xcf\'\x18@\xd7\xed\xb0&5\x07\x11@-AM\xbfL\xbf\x17@K\xa6{\xd6x@ \xc0\xa9\xb7\xfb\xe0\xf2\xbd\xcb?\xf6\xe1-\x0c\xd8\xa4\x0c@.\xb1%\xd6\xebu\x17\xc0%\xd7\xa5\xbe\x03\x1b\x10\xc0#\x9d\xaft\xc0\xe4\x14\xc09R\xce\xfc\x03\xf8\xfa?E\x86\x9fc/F\x0f@\x08\xe7\xae\xdc\xd4\xe2\x08@\xa5?\xd5\x9f\x08j\xe1?\x8d\xafx\x1c\x9e\x19\xc2\xbf\xcd=\x12r]\xc1\x01@Z\xb3VG\xb9f\x15@\x1a*!\xe1\xa0\xe4\x14\xc0IL\xa0%\xdbr\x03\xc0q\x92\xa8\x8el\xee\xcc?'
tbasg32
I00
sg33
I00
sg34
g1
(g35
g3
NtRp116
(dp117
g38
(I00
I00
tp118
sg40
S'float64'
p119
sg42
g31
sg43
I00
sg24
Nsbsg44
Nsbsg24
S'W'
sg45
Nsg34
g116
sbasg12
(itheano.gof.utils
scratchpad
p120
(dp121
bsS'outputs'
p122
(lp123
g82
asS'op'
p124
g1
(ctheano.tensor.basic
Dot
p125
g3
NtRp126
(dp127
S'_op_use_c_code'
p128
S'/usr/bin/g++'
p129
sbsbsg34
g1
(g35
g3
NtRp130
(dp131
g38
(I00
I00
tp132
sg40
S'float64'
p133
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g47
g3
NtRp134
(dp135
g9
S'auto_283'
p136
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p137
(dp138
bsg24
Nsg45
g1
(g55
g3
NtRp139
(dp140
g58
(lp141
g7
asg12
(itheano.gof.utils
scratchpad
p142
(dp143
bsg122
(lp144
g134
asg124
g1
(ctheano.tensor.elemwise
DimShuffle
p145
g3
NtRp146
(dp147
S'drop'
p148
(lp149
sS'shuffle'
p150
(lp151
I0
asS'augment'
p152
(lp153
I0
asS'input_broadcastable'
p154
g39
sS'inplace'
p155
I00
sS'new_order'
p156
(S'x'
I0
tp157
sg128
g129
sbsbsg34
g1
(g35
g3
NtRp158
(dp159
g38
(I01
I00
tp160
sg40
g41
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p161
(dp162
bsg122
(lp163
g72
asg124
g1
(ctheano.tensor.elemwise
Elemwise
p164
g3
NtRp165
(dp166
S'__module__'
p167
S'tensor'
p168
sS'scalar_op'
p169
g1
(ctheano.scalar.basic
Add
p170
g3
NtRp171
(dp172
S'output_types_preference'
p173
ctheano.scalar.basic
upcast_out
p174
sg128
g129
sg24
S'add'
p175
sbsg24
S'Elemwise{add,no_inplace}'
p176
sg128
g129
sS'destroy_map'
p177
(dp178
sS'nfunc_spec'
p179
(g175
I2
I1
tp180
sS'inplace_pattern'
p181
(dp182
sS'openmp'
p183
I00
sS'__doc__'
p184
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p185
sbsbsg34
g1
(g35
g3
NtRp186
(dp187
g38
(I00
I00
tp188
sg40
S'float64'
p189
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p190
(dp191
bsg122
(lp192
g60
asg124
g1
(ctheano.tensor.nnet.nnet
Softmax
p193
g3
NtRp194
(dp195
g128
g129
sbsbsg34
g186
sbag1
(ctheano.tensor.var
TensorConstant
p196
g3
NtRp197
(dp198
g9
S'auto_286'
p199
sg11
Nsg12
(itheano.gof.utils
scratchpad
p200
(dp201
S'unique_value'
p202
Nsbsg24
NsS'cached'
p203
I01
sg34
g1
(g35
g3
NtRp204
(dp205
g38
(tsg40
S'int8'
p206
sg42
g30
(S'i1'
I0
I1
tRp207
(I3
S'|'
NNNI-1
I-1
I0
tbsg43
I00
sg24
NsbsS'data'
p208
g27
(g28
(I0
tS'b'
tRp209
(I1
(tg207
I00
S'\x01'
tbsbasg12
(itheano.gof.utils
scratchpad
p210
(dp211
bsg122
(lp212
g1
(g47
g3
NtRp213
(dp214
g9
S'auto_287'
p215
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p216
(dp217
g15
(lp218
sbsg24
S'max'
p219
sg45
g56
sg34
g1
(g35
g3
NtRp220
(dp221
g38
(I00
tp222
sg40
g189
sg42
g31
sg43
I00
sg24
Nsbsbag48
asg124
g1
(ctheano.tensor.basic
MaxAndArgmax
p223
g3
NtRp224
(dp225
g128
g129
sbsbsg34
g1
(g35
g3
NtRp226
(dp227
g38
(I00
tp228
sg40
S'int64'
p229
sg42
g30
(S'i8'
I0
I1
tRp230
(I3
S'<'
NNNI-1
I-1
I0
tbsg43
I00
sg24
NsbsbsS'params'
p231
(lp232
g105
ag7
asS'W'
g105
sS'input'
p233
g92
sS'p_y_given_x'
p234
g60
sb.